find.package("devtools")
library(devtools)
search()
citation()
clear()
clear()
dev.flush(level=1L)
a<-10+10
a
b<-a
a+b
c<-A
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
find.package(caret)
find.package("caret")
library(caret)
search()
search()
library(KernSmooth)
search()
install.packages("rpart")
install.packages("utils")
q()
NSAMPLES <- 15
NTESTS <- 100
pvalues <- 1:NTESTS
for(n in 1:NTESTS){
y1<- runif(NSAMPLES); y2 <- runif(NSAMPLES)
X <- t.test(y1,y2,var.equal=TRUE)
pvalues[n] <- X$p.value
}
clear()
NSAMPLES <- 15
NTESTS <- 100
pvalues <- 1:NTESTS
for(n in 1:NTESTS){
y1<- runif(NSAMPLES); y2 <- runif(NSAMPLES)
X <- t.test(y1,y2,var.equal=TRUE)
pvalues[n] <- X$p.value
}
install.packages("jsonlite")
install.packages("swirl")
library(swirl)
swirl()
bye()
q()
swirl()
library(swirl)
swirl()
time()
time(x)
x<-5
time(x)
library(swirl)
swirl()
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[c-(2,10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
a<-matrix(1:9,3,3)
b<solve(a)
b<-solve(a)
class(a)
b
solve(1)
solve(a)
quit()
library(swirl)
swirl()
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply()
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
library(XML)
fileURL<-"http://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(fileURL,useInternalNodes = T)
install.packages("XML")
install.packages("XML")
library(XML)
doc<-xmlTreeParse("http://www.w3schools.com/xml/simple.xml",useInternalNodes = T)
fileURL<-"http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc<-htmlTreeParse(fileURL,useInternalNodes = TRUE)
scores<-xpathSApply(doc,"//li[@class='score']",xmlValue)
teams<-xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
teams
doc<-htmlTreeParse(fileURL,useInternal = TRUE)
scores<-xpathSApply(doc,"//li[@class='score']",xmlValue)
teams<-xpathSApply(doc,"//li[@class='team-name']",xmlValue)
scores
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsonData<-fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
names(jsonData$owner$login)
names(jsonData$owner$id)
names(jsonData$owner$avatar_url)
myJson<-toJSON(iris,pretty = TRUE)
cat(myJson)
myJson2<-toJSON(iris,pretty = TRUE)
myJson2<-toJSON(iris)
cat(myJson2)
library(data.table)
install.packages("data.frame")
install.packages("data.table")
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
DT
DF
tables()
DT[3,]
DT[DT$y=="b"]
DT[c(3,4)]
DT[,w:=z^3]
DT
setkey(x)
setkey(DT,x)
DT['a']
setkey(DT,y)
DT['a']
library(swirl)
library("swirl")
install.packages("swirl")
library(swirl)
library(swirl)
library("swirl", lib.loc="~/R/win-library/3.3")
fileURL<"http://www.w3schools.com/xml/simple.xml"
fileURL<-"http://www.w3schools.com/xml/simple.xml"
library(XML)
xmlTreeParse(fileURL,useInternalNodes = TRUE)
doc<-xmlTreeParse(fileURL,useInternalNodes = TRUE)
rootValue<-xmlRoot(doc)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version<="3.0.2",country=="India")
filter(cran,r_version<="3.0.2",country=="IN")
library(swirl)
swirl()
bye()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(lattice)
library(datasets)
xyplot(Ozone~Wind,data=airquality)
library(datasets)
library(lattice)
## Convert 'Month' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
library(datasets)
library(lattice)
## Convert 'Month' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(1,5))
library(datasets)
library(lattice)
## Convert 'Month' to a factor variable
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
?dist
str(hClustering)
?plclust
?hclust
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*! Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
?image
m = matrix(runif(100),10,10)
image(m)
m = matrix(runif(100),10,10)
image(m)
m
m[10][6]
m[10,6]
m[6,2]
m[4,2]
m[5,2]
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
library(knitr)
setwd("D:/F drive/Personal/DATA SCIENCE/Reproducible Research/Assignments/Fitness")
knit2html("fitness.Rmd")
knit2html("./fitness.Rmd")
knit_with_parameters('D:/F drive/Personal/DATA SCIENCE/Reproducible Research/Assignments/Fitness/fitness.Rmd')
library("knitr", lib.loc="~/R/win-library/3.3")
install.packages("knitr")
install.packages("knitr")
library(knitr)
knit2html("fitness.Rmd")
knit2html("./fitness.Rmd")
render_markdown("./fitness.Rmd")
load("D:/F drive/Personal/DATA SCIENCE/Reproducible Research/Assignments/Fitness/fitness.RData")
render_html("./fitness.Rmd")
render("./fitness.Rmd")
render_markdown("./fitness.Rmd")
a<-render_markdown("./fitness.Rmd")
knit_with_parameters('D:/F drive/Personal/DATA SCIENCE/Reproducible Research/Assignments/Fitness/fitness.Rmd')
render("./fitness.Rmd",clean=F)
library(knitr)
render_markdown("./fitness.Rmd",clean=F)
setwd("D:/F drive/Personal/DATA SCIENCE/Reproducible Research/Assignments/Fitness/Final Submission")
git init
